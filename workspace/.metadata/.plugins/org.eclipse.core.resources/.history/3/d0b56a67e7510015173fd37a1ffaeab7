
import com.leapmotion.leap.Vector;

import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.text.Text;
import javafx.scene.text.TextAlignment;
import javafx.stage.Stage;

@SuppressWarnings("restriction")
public class App extends Application {

	public static final float W = 1800; // canvas dimensions.
	public static final float H = 1000;
	public static float posX = 0;
	public static float posY = 0;
	public static float radiusDot = 5;
	public static float radiusHand = 2;

	public static Circle dot;
	public static Circle hand;
	public static Circle r_min;
	public static Circle r_max;

	public static Text txt_1, txt_2;

	public App() {

	}

	public static void updateHandDot() {

		hand.setTranslateX(LeapListener.handPos.getX());
		hand.setTranslateY(LeapListener.handPos.getZ());

	}

	public static void set_r(Vector v) {
		posX = v.getX();
		posY = v.getZ();

		r_max.setTranslateX(LeapListener.handPos.getX());
		r_max.setTranslateY(LeapListener.handPos.getZ());

		r_min.setTranslateX(LeapListener.handPos.getX());
		r_min.setTranslateY(LeapListener.handPos.getZ());
		// System.out.println("aaa "+LeapListener.handPos);
	}

	public static void move(Vector p) {

		dot.setTranslateX(p.getX());
		dot.setTranslateY(p.getZ());

		// set Radius
		// der Radius des Kreises wird mit dem Radius der Deadzone addiert
		// Wenn die Deadzone und der Kreis gleich groﬂ sind, dann ist die
		// Y-Handposition Null
		double rad = (double) GeschwindigkeitsRegelung.r_min + ((double) (p.getY() / 100));
		if (rad < 3) {
			dot.setRadius(3);
		} else if (rad > 50) {
			dot.setRadius(50);
		} else {
			dot.setRadius(rad);
		}

		// System.out.println((double)(p.getY()/10));
	}

	@Override
	public void start(Stage primaryStage) {

		dot = new Circle(radiusDot, Color.RED);
		hand = new Circle(radiusHand, Color.BLUE);

		r_min = new Circle(GeschwindigkeitsRegelung.r_min);
		r_min.opacityProperty().set(0.4);

		r_max = new Circle(GeschwindigkeitsRegelung.r_max);
		r_max.opacityProperty().set(0.1);

		GeschwindigkeitsRegelung.currentPos = new Vector(0f, 0f, 0f);

		Button btn_1 = new Button();
		btn_1.setText("Steuerung 1");
		btn_1.setTranslateX(-800);
		btn_1.setTranslateY(-400);
		btn_1.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent event) {
				GeschwindigkeitsRegelung.steuerung_1 = true;
				GeschwindigkeitsRegelung.steuerung_2 = false;
				GeschwindigkeitsRegelung.steuerung_3 = false;
			}
		});
		Button btn_2 = new Button();
		btn_2.setText("Steuerung 2");
		btn_2.setTranslateX(-800);
		btn_2.setTranslateY(-350);
		btn_2.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent event) {
				GeschwindigkeitsRegelung.steuerung_1 = false;
				GeschwindigkeitsRegelung.steuerung_2 = true;
				GeschwindigkeitsRegelung.steuerung_3 = false;
			}
		});
		Button btn_3 = new Button();
		btn_3.setText("Kombination");
		btn_3.setTranslateX(-800);
		btn_3.setTranslateY(-300);
		btn_3.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent event) {
				GeschwindigkeitsRegelung.steuerung_1 = false;
				GeschwindigkeitsRegelung.steuerung_2 = false;
				GeschwindigkeitsRegelung.steuerung_3 = true;
			}
		});
		final Button btn_k = new Button();
		btn_k.setText("k = 0");
		btn_k.setTranslateX(-700);
		btn_k.setTranslateY(-400);
		btn_k.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent event) {
				if (GeschwindigkeitsRegelung.k == 0) {
					GeschwindigkeitsRegelung.k = (float) 0.25;
					btn_k.setText("k = 0.25");
				} else if (GeschwindigkeitsRegelung.k == 0.25) {
					GeschwindigkeitsRegelung.k = (float) 0.5;
					btn_k.setText("k = 0.5");
				} else if (GeschwindigkeitsRegelung.k == 0.5) {
					GeschwindigkeitsRegelung.k = (float) 0.75;
					btn_k.setText("k = 0.75");
				} else if (GeschwindigkeitsRegelung.k == 0.75) {
					GeschwindigkeitsRegelung.k = (float) 1;
					btn_k.setText("k = 1");
				} else if (GeschwindigkeitsRegelung.k == 1) {
					GeschwindigkeitsRegelung.k = 0;
					btn_k.setText("k = 0");
				}

			}
		});
		final Button btn_mirror = new Button();
		btn_mirror.setText("Mirror: ON");
		btn_mirror.setTranslateX(-700);
		btn_mirror.setTranslateY(-350);
		btn_mirror.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent event) {
				System.out.println("1");
				if (GeschwindigkeitsRegelung.mirror) {
					GeschwindigkeitsRegelung.mirror = false;
					btn_mirror.setText("Mirror: OFF");
				} else {
					GeschwindigkeitsRegelung.mirror = true;
					btn_mirror.setText("Mirror: ON");
				}

			}
		});
		final Button btn_scale_1 = new Button();
		btn_scale_1.setText("Scale = 1");
		btn_scale_1.setTranslateX(-600);
		btn_scale_1.setTranslateY(-400);
		btn_scale_1.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent event) {
				if (GeschwindigkeitsRegelung.scale_1 == 1) {
					GeschwindigkeitsRegelung.scale_1 = (float) 2;
					btn_scale_1.setText("Scale = 2");
				} else if (GeschwindigkeitsRegelung.scale_1 == 2) {
					GeschwindigkeitsRegelung.scale_1 = (float) 3;
					btn_scale_1.setText("Scale = 3");
				} else if (GeschwindigkeitsRegelung.scale_1 == 3) {
					GeschwindigkeitsRegelung.scale_1 = (float) 4;
					btn_scale_1.setText("Scale = 4");
				} else if (GeschwindigkeitsRegelung.scale_1 == 4) {
					GeschwindigkeitsRegelung.scale_1 = (float) 0.5;
					btn_scale_1.setText("Scale = 0.5");
				} else if (GeschwindigkeitsRegelung.scale_1 == 0.5) {
					GeschwindigkeitsRegelung.scale_1 = (float) 1;
					btn_scale_1.setText("Scale = 1");
				}
			}
		});
		final Button btn_scale_2 = new Button();
		btn_scale_2.setText("Scale = 1");
		btn_scale_2.setTranslateX(-600);
		btn_scale_2.setTranslateY(-350);
		btn_scale_2.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent event) {
				if (GeschwindigkeitsRegelung.scale_2 == 1) {
					GeschwindigkeitsRegelung.scale_2 = (float) 1.5;
					btn_scale_2.setText("Scale = 1.5");
				} else if (GeschwindigkeitsRegelung.scale_2 == 1.5) {
					GeschwindigkeitsRegelung.scale_2 = (float) 2;
					btn_scale_2.setText("Scale = 2");
				} else if (GeschwindigkeitsRegelung.scale_2 == 2) {
					GeschwindigkeitsRegelung.scale_2 = (float) 0.5;
					btn_scale_2.setText("Scale = 0.5");
				} else if (GeschwindigkeitsRegelung.scale_2 == 0.5) {
					GeschwindigkeitsRegelung.scale_2 = (float) 1;
					btn_scale_2.setText("Scale = 1");
				}
			}
		});
		txt_1 = new Text();
		txt_1.setTextAlignment(TextAlignment.RIGHT);
		txt_1.setTranslateX(750);
		txt_1.setTranslateY(-480);
		txt_1.setText("Timer: ");
		txt_2 = new Text();
		txt_2.setTranslateX(750);
		txt_2.setTranslateY(-450);
		txt_2.setText("Hand y: ");

		StackPane root = new StackPane();

		root.getChildren().add(r_max);
		root.getChildren().add(r_min);
		root.getChildren().add(hand);
		root.getChildren().add(dot);
		root.getChildren().add(btn_1);
		root.getChildren().add(btn_2);
		root.getChildren().add(btn_3);
		root.getChildren().add(btn_mirror);
		root.getChildren().add(btn_k);
		root.getChildren().add(btn_scale_1);
		root.getChildren().add(btn_scale_2);
		root.getChildren().add(txt_1);
		root.getChildren().add(txt_2);
		Scene scene = new Scene(root, 1800, 1000);

		primaryStage.setTitle("Hello World!");
		primaryStage.setScene(scene);
		primaryStage.show();

		// Timer.initDrop();

	}

	public static void updateText() {

		txt_1.setText("Drop Time: " + Math.round(Timer.dropTime));
		txt_2.setText("Hand y: " + LeapListener.handPos.getY());
	}

	public static void main(String[] args) {
		launch(args);
	}
}