import java.io.IOException;

import com.leapmotion.leap.*;
import com.leapmotion.leap.Gesture.State;
import com.leapmotion.leap.Vector;

class LeapListener extends Listener {
	
	public static int fingerAnzahl;
	public static Vector handPos;
	public void OnInit(Controller controller) {
		System.out.println("Initialisiert");
	}

	public void onConnect(Controller controller) {
		System.out.println("Initialisiert2");
	}

	public void onFrame(Controller controller) {
		// Get the most recent frame and report some basic information
		Frame frame = controller.frame();
//		System.out.println("Frame id: " + frame.id());
//		System.out.println("Timestamp: " + frame.timestamp());
//		System.out.println("Hands: "+ frame.hands().count());
//		System.out.println("Fingers: " + frame.fingers().count());
//		System.out.println("Frame id: " + frame.id());
		
		

		// Get hands
		for (Hand hand : frame.hands()) {
//			String handType = hand.isLeft() ? "Left hand" : "Right hand";
//			System.out.println(hand.fingers().extended().count()+"  " + handType + ", id: " + hand.id() + ", palm position: " + hand.palmPosition());

			// Get the hand's normal vector and direction
			Vector normal = hand.palmNormal();
			Vector direction = hand.direction();
			fingerAnzahl=hand.fingers().extended().count();
			handPos=hand.palmPosition();
		}

//		System.out.println(handPos);
//		System.out.println(fingerAnzahl);
		
	}
}

public class LeapController {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		LeapListener listener = new LeapListener();
		Controller controller = new Controller();

		controller.addListener(listener);
		System.out.println("Initialisiert1");
		
	       // Keep this process running until Enter is pressed
        System.out.println("Press Enter to quit...");
        System.out.println("aaaaaaaaaaaaaaaa"+controller.frame().fingers().count());
        try {
            System.in.read();
        } catch (IOException e) {
            e.printStackTrace();
        }
        // Remove the sample listener when done
        
  
        
 
    
	}

}
